import { useNavigate, useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import useAxios from "./useAxios";
import useViewStore from "../store/viewStore";

export const useSwipe = () => {
    const navigate = useNavigate();
    const axios = useAxios();
    const { username } = useParams();
    const { setVideoIsLoading, swipeMode } = useViewStore();

    const [swipeDisabled, setSwipeDisabled] = useState(false);
    const [prevSwipeDisabled, setPrevSwipeDisabled] = useState(true);
    const [nextSwipeDisabled, setNextSwipeDisabled] = useState(false);

    useEffect(() => {
        const keys =
            JSON.parse(sessionStorage.getItem(swipeMode + "VideoKeys")) || [];
        const current =
            parseInt(sessionStorage.getItem(swipeMode + "Current")) || 0;

        /**
         * if at key index 0, then no prev key, so disable prevSwipe
         * if at profile video and no next key, then no next video in profile, so disable nextSwipe
         */
        setPrevSwipeDisabled(current === 0);
        setNextSwipeDisabled(swipeMode === "profile" && !keys[current + 1]);
    }, [swipeMode]);

    const swipeNavigate = (currentKey, targetKey) => {
        if (currentKey !== targetKey) {
            setVideoIsLoading(true);
        }

        const prefix =
            swipeMode === "explore" ? "/video/" : `/profile/${username}/`;
        navigate(prefix + targetKey);
    };

    const fillQueue = async (val = 10) => {
        return new Promise((resolve, reject) => {
            axios
                .get(`/video/getVideos/${val}`)
                .then(({ data }) => {
                    if (data.success) {
                        // get current keys or [] if none
                        const currentKeys =
                            JSON.parse(
                                sessionStorage.getItem("exploreVideoKeys")
                            ) || [];

                        // merge current keys with fetched keys
                        const newKeys = currentKeys.concat(
                            data.videoDocuments.map((doc) => doc.videoKey)
                        );

                        // set new keys
                        sessionStorage.setItem(
                            "exploreVideoKeys",
                            JSON.stringify(newKeys)
                        );

                        // return first key
                        resolve(newKeys[0]);
                    } else reject("Filling Queue Failed");
                })
                .catch((err) => {
                    console.error(err);
                    resolve(null);
                });
        });
    };

    const swipe = async (dir) => {
        if (swipeDisabled) return;
        setSwipeDisabled(true);

        setTimeout(() => {
            setSwipeDisabled(false);
        }, 500);

        const keysStorageName = swipeMode + "VideoKeys";
        const currentStorageName = swipeMode + "Current";

        const keys = JSON.parse(sessionStorage.getItem(keysStorageName)) || [];
        const current =
            parseInt(sessionStorage.getItem(currentStorageName)) || 0;

        /**
         * if current key index is <= 1 and we are going to prev video,
         * then disable prevSwipe because there wont be a video previous to the previous video
         *
         * if at profile video and no video after the next video and we are going to next video
         * then disable nextSwipe because there wont be a video after the next video
         */
        setPrevSwipeDisabled(current <= 1 && dir === "prev");
        setNextSwipeDisabled(
            swipeMode === "profile" && !keys[current + 2] && dir === "next"
        );

        switch (dir) {
            case "prev": {
                if (prevSwipeDisabled) return;

                const prevIndex = current - 1;
                sessionStorage.setItem(currentStorageName, prevIndex);
                swipeNavigate(keys[current], keys[prevIndex]);

                break;
            }
            case "next": {
                if (nextSwipeDisabled) return;

                /**
                 * if next video exists
                 *      then navigate to it
                 *          if the distance to the end of the keys list is <= 4
                 *          and we are in the explore mode
                 *              then fillQueue
                 * if not, and if we are in the explore mode
                 *      then fillQueue
                 *      and navigate to the index 1 key generated by fillQueue
                 */
                if (keys[current + 1]) {
                    const nextIndex = current + 1;
                    sessionStorage.setItem(currentStorageName, nextIndex);

                    swipeNavigate(keys[current], keys[nextIndex]);

                    if (keys.length - nextIndex <= 4 && swipeMode === "explore")
                        await fillQueue();
                } else if (swipeMode === "explore") {
                    const key = await fillQueue();

                    swipeNavigate(keys[current], key);
                }
                break;
            }
            default:
                throw Error("Unrecognized swipe direction");
        }
    };

    const insertVideo = (videoKey) => {
        const keys =
            JSON.parse(sessionStorage.getItem("exploreVideoKeys")) || [];
        const current = parseInt(sessionStorage.getItem("exploreCurrent")) || 0;
        keys.splice(current, 0, videoKey);
        sessionStorage.setItem("exploreVideoKeys", JSON.stringify(keys));
    };

    return {
        swipe,
        fillQueue,
        swipeDisabled,
        setSwipeDisabled,
        prevSwipeDisabled,
        setPrevSwipeDisabled,
        nextSwipeDisabled,
        setNextSwipeDisabled,
        insertVideo,
    };
};
